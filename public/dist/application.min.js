"use strict";var ApplicationConfiguration=function(){var applicationModuleName="bwells",applicationModuleVendorDependencies=["ngAnimate","ui.router","ui.bootstrap"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("index",{url:"/",templateUrl:"modules/core/views/index.client.view.html"})}]),angular.module("core").controller("IndexController",["$scope","$timeout",function($scope,$timeout){function resize_func(){var window_height=Math.ceil(window.innerHeight),window_width=Math.ceil(window.innerWidth),header_height=window_width/40;$(".main_nav").height(header_height+"px"),$("#canvas_head").height(header_height+"px"),window_height-=2*header_height,$scope.canvas_width=window_width,$scope.canvas_height=.75*$scope.canvas_width,$scope.canvas_height>window_height?($scope.canvas_height=window_height,$scope.canvas_width=1.33333*window_height,$("#canvas_container").css("padding","0")):$("#canvas_container").css("padding",(window_height-$scope.canvas_height)/2+"px 0"),$(".canvas_layer").width($scope.canvas_width),$("#canvas_container").height($scope.canvas_height+$("#canvas_head").height()),$scope.header_font_size=window_width/700,$scope.overlay_font_size=$scope.canvas_width/600,$scope.$apply()}$timeout(function(){resize_func()},100),$(window).resize(function(){resize_func()})}]),function(){for(var lastTime=0,vendors=["ms","moz","webkit","o"],x=0;x<vendors.length&&!window.requestAnimationFrame;++x)window.requestAnimationFrame=window[vendors[x]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[vendors[x]+"CancelAnimationFrame"]||window[vendors[x]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(callback){var currTime=(new Date).getTime(),timeToCall=Math.max(0,16-(currTime-lastTime)),id=window.setTimeout(function(){callback(currTime+timeToCall)},timeToCall);return lastTime=currTime+timeToCall,id}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(id){clearTimeout(id)})}(),angular.module("core").directive("welloSnake",["$timeout",function($timeout){return{restrict:"E",replace:!0,scope:{w:"=",h:"=",overlayfontsize:"=",headerfontsize:"="},templateUrl:"modules/core/views/snake.client.view.html",link:function(scope,element){function Collidable(x,y){this.setPosition=function(x,y){this.x=x,this.y=y,this.hash_value=x*HASH_MULTIPLIER+y},this.setPosition(x,y)}function Wall(x,y){this.color="#F66",this.hit_value=HIT_WALL,Collidable.call(this,x,y)}function PlayerSnakeNib(x,y){this.color="#FF0",this.hit_value=PLAYER_SNAKE_TYPE,Collidable.call(this,x,y)}function AssassinSnakeNib(x,y){this.color="#F00",this.hit_value=AI_SNAKE_ASSASSIN_TYPE,Collidable.call(this,x,y)}function GathererSnakeNib(x,y){this.color="#0F0",this.hit_value=AI_SNAKE_GATHERER_TYPE,Collidable.call(this,x,y)}function ClosestSnakeNib(x,y){this.color="#F0F",this.hit_value=AI_SNAKE_CLOSEST_TYPE,Collidable.call(this,x,y)}function FarthestSnakeNib(x,y){this.color="#0FF",this.hit_value=AI_SNAKE_FARTHEST_TYPE,Collidable.call(this,x,y)}function Candy(collidable_hash,candy_buffer){this.color="#FFF",this.hit_value=HIT_CANDY,this.collidable_hash=collidable_hash,this.candy_buffer=candy_buffer;var first=!0;this.is_spawn_ok=function(x,y,buffer){for(var i=x-buffer;x+buffer>=i;i++)for(var j=y-buffer;y+buffer>=j;j++)if(null!==collidable_hash.test(i,j))return!1;return!0},this.findSpawn=function(){var x,y,spawn_dist=this.candy_buffer,tries=0;for(x=Math.floor(Math.random()*collidable_hash.w),y=Math.floor(Math.random()*collidable_hash.h);!this.is_spawn_ok(x,y,spawn_dist);)tries++,tries>MAX_CANDY_TRIES&&(spawn_dist--,0>spawn_dist&&(spawn_dist=0),tries=0),x=Math.floor(Math.random()*collidable_hash.w),y=Math.floor(Math.random()*collidable_hash.h);first=!1,Collidable.call(this,x,y),collidable_hash.add(this)},this.reset_candy=function(){first||collidable_hash.remove(this),this.findSpawn()}}function CollidableHash(ctx,block_size,w,h){this.hash={},this.w=w,this.h=h;var block_size_pad=block_size-2,cur_size=0;this.add=function(elem){if(!(elem instanceof Collidable))throw new Error("CollidableHash only accepts Collidables");this.hash.hasOwnProperty(elem.hash_value)?this.hash[elem.hash_value]instanceof Candy&&(ctx.fillStyle=elem.color,ctx.fillRect(elem.x*block_size+1,elem.y*block_size+1,block_size_pad,block_size_pad)):(ctx.fillStyle=elem.color,ctx.fillRect(elem.x*block_size+1,elem.y*block_size+1,block_size_pad,block_size_pad),cur_size++),this.hash[elem.hash_value]=elem},this.remove=function(elem){!this.hash.hasOwnProperty(elem.hash_value)||this.hash[elem.hash_value]instanceof Wall||(delete this.hash[elem.hash_value],ctx.fillStyle=CLEAR_COLOR,ctx.fillRect(elem.x*block_size,elem.y*block_size,block_size,block_size),cur_size--)},this.empty=function(){for(var key in this.hash)delete this.hash[key];cur_size=0,ctx.fillStyle=CLEAR_COLOR,ctx.fillRect(0,0,block_size*w,block_size*h)},this.test=function(x,y){var hash_test=x*HASH_MULTIPLIER+y;return this.hash.hasOwnProperty(hash_test)?this.hash[hash_test].hit_value:null},this.redraw=function(ctx,block_size){var collidable,block_size_padding=block_size-SNAKE_BORDER_PIXELS;for(var key in this.hash)collidable=this.hash[key],ctx.fillStyle=collidable.color,collidable.hit_value===HIT_WALL?ctx.fillRect(collidable.x*block_size,collidable.y*block_size,block_size,block_size):ctx.fillRect(collidable.x*block_size+1,collidable.y*block_size+1,block_size_padding,block_size_padding)}}function CircularCollidablePoolQueue(initial_size,collidable_hash,collidable_constructor){this.buffer=_.range(initial_size).map(function(){return null});var max_size=initial_size,cur_size=0;this.head=0,this.tail=0,this.collidable_constructor=collidable_constructor,this.clean_tail=function(){cur_size===max_size&&(this.tail=this.head,collidable_hash.remove(this.buffer[this.tail]))},this.enqueue=function(x,y){cur_size===max_size?this.buffer[this.head].setPosition(x,y):(this.buffer[this.head]=new this.collidable_constructor(x,y),cur_size++),collidable_hash.add(this.buffer[this.head]),this.head++,this.head===max_size&&(this.head=0)},this.update_constructor=function(new_collidable_constructor){this.collidable_constructor=new_collidable_constructor},this.reset=function(){for(var i=0;max_size>i;i++)this.buffer[i]instanceof Collidable&&(collidable_hash.remove(this.buffer[i]),delete this.buffer[i],this.buffer[i]=null);max_size=initial_size,cur_size=0,this.head=0,this.tail=0},this.expand=function(expand_amount){max_size+=expand_amount,Array.prototype.splice.apply(this.buffer,[this.head,0].concat(_.range(expand_amount).map(function(){return null}))),this.tail>this.head&&(this.tail+=expand_amount)}}function PlayerSnake(initial_size,expand_size,collidable_hash){this.collidable_hash=collidable_hash,this.expand_size=expand_size,this.reset_snake=function(x,y){this.reset(),this.x=x,this.y=y,this.dir_x=1,this.dir_y=0,this.enqueue(this.x,this.y)},this.keyInput=function(key){return 0!==this.dir_x?1===key?(this.dir_x=0,this.dir_y=-1,!0):3===key?(this.dir_x=0,this.dir_y=1,!0):!1:2===key?(this.dir_y=0,this.dir_x=1,!0):4===key?(this.dir_y=0,this.dir_x=-1,!0):0!==this.dir_y?!1:1===key?(this.dir_x=0,this.dir_y=-1,!0):3===key?(this.dir_x=0,this.dir_y=1,!0):void 0},CircularCollidablePoolQueue.call(this,initial_size,collidable_hash,PlayerSnakeNib)}function AISnake(initial_size,expand_size,collidable_hash){this.collidable_hash=collidable_hash,this.expand_size=expand_size,this.reset_snake=function(x,y){this.reset(),this.snake_type=1+Math.floor(4*Math.random()),this.update_constructor(this.snake_type===AI_SNAKE_ASSASSIN_TYPE?AssassinSnakeNib:this.snake_type===AI_SNAKE_CLOSEST_TYPE?ClosestSnakeNib:this.snake_type===AI_SNAKE_FARTHEST_TYPE?FarthestSnakeNib:GathererSnakeNib),this.x=x,this.y=y,this.dir_x=0,this.dir_y=0,this.alive=!0,this.enqueue(x,y)},this.is_move_bad=function(x,y){var hash_test_result=this.collidable_hash.test(x,y);return null!==hash_test_result&&hash_test_result!==HIT_CANDY?!0:!1},this.compute_action=function(player_x,player_y,candy_x,candy_y){var goal_x,goal_y;this.snake_type===AI_SNAKE_ASSASSIN_TYPE?(goal_x=player_x,goal_y=player_y):this.snake_type===AI_SNAKE_CLOSEST_TYPE?Math.abs(player_x-this.x)+Math.abs(player_y-this.y)<Math.abs(candy_x-this.x)+Math.abs(candy_y-this.y)?(goal_x=player_x,goal_y=player_y):(goal_x=candy_x,goal_y=candy_y):this.snake_type===AI_SNAKE_FARTHEST_TYPE&&Math.abs(player_x-this.x)+Math.abs(player_y-this.y)>Math.abs(candy_x-this.x)+Math.abs(candy_y-this.y)?(goal_x=player_x,goal_y=player_y):(goal_x=candy_x,goal_y=candy_y),goal_x-=this.x,goal_y-=this.y,0===this.dir_x?goal_y>0&&1===this.dir_y||0>goal_y&&-1===this.dir_y?this.is_move_bad(this.x,this.y+this.dir_y)&&(goal_x>0?this.is_move_bad(this.x+1,this.y)?(this.dir_x=-1,this.dir_y=0):(this.dir_x=1,this.dir_y=0):this.is_move_bad(this.x-1,this.y)?(this.dir_x=1,this.dir_y=0):(this.dir_x=-1,this.dir_y=0)):goal_x>0?this.is_move_bad(this.x+1,this.y)?this.is_move_bad(this.x-1,this.y)||(this.dir_x=-1,this.dir_y=0):(this.dir_x=1,this.dir_y=0):this.is_move_bad(this.x-1,this.y)?this.is_move_bad(this.x+1,this.y)||(this.dir_x=1,this.dir_y=0):(this.dir_x=-1,this.dir_y=0):goal_x>0&&1===this.dir_x||0>goal_x&&-1===this.dir_x?this.is_move_bad(this.x+this.dir_x,this.y)&&(goal_y>0?this.is_move_bad(this.x,this.y+1)?(this.dir_x=0,this.dir_y=-1):(this.dir_x=0,this.dir_y=1):this.is_move_bad(this.x,this.y-1)?(this.dir_x=0,this.dir_y=1):(this.dir_x=0,this.dir_y=-1)):goal_y>0?this.is_move_bad(this.x,this.y+1)?this.is_move_bad(this.x,this.y-1)||(this.dir_x=0,this.dir_y=-1):(this.dir_x=0,this.dir_y=1):this.is_move_bad(this.x,this.y-1)?this.is_move_bad(this.x,this.y+1)||(this.dir_x=0,this.dir_y=1):(this.dir_x=0,this.dir_y=-1)},this.is_alive=function(){return this.alive},this.kill=function(){this.alive=!1,this.reset()},CircularCollidablePoolQueue.call(this,initial_size,collidable_hash,null)}function restart(){$timeout(function(){base_speed=1,scope.lives=5,scope.score=0,scope.stage=1,scope.cur_candy=0,extra_life_score=extra_life_req,next_stage_speedup=8,scope.needed_candy=5,scope.newgame=!0,load_stage()})}function load_stage(){scope.paused=!0,scope.gameover=!1,scope.config=!1,scope.dead=!1,scope.cur_candy=0,playing_field.empty(),load_border(),load_obstacles(),redraw(),reset()}function load_border(){for(var i=0;i<dimension[1];i++)playing_field.add(new Wall(0,i)),playing_field.add(new Wall(dimension[0]-1,i));for(i=0;i<dimension[0];i++)playing_field.add(new Wall(i,0)),playing_field.add(new Wall(i,dimension[1]-1))}function load_obstacles(){var i;switch(scope.stage%8){case 2:for(i=Math.round(dimension[0]/4);i<Math.round(dimension[0]-dimension[0]/4);i++)playing_field.add(new Wall(i,Math.round(dimension[1]/2)));break;case 3:for(i=Math.round(dimension[1]/4);i<Math.round(dimension[1]-dimension[1]/4);i++)playing_field.add(new Wall(Math.round(dimension[0]/4),i)),playing_field.add(new Wall(Math.round(dimension[0]-dimension[0]/4),i));break;case 4:for(i=0;i<Math.round(dimension[0]/3);i++)playing_field.add(new Wall(i,Math.round(dimension[1]/3))),playing_field.add(new Wall(dimension[0]-i,Math.round(2*dimension[1]/3)));for(i=0;i<Math.round(dimension[1]/3);i++)playing_field.add(new Wall(Math.round(dimension[0]/3),dimension[1]-i)),playing_field.add(new Wall(Math.round(2*dimension[0]/3),i));break;case 5:for(i=0;i<Math.round(4*dimension[0]/9);i++)playing_field.add(new Wall(i,Math.round(dimension[1]/2))),playing_field.add(new Wall(dimension[0]-i,Math.round(dimension[1]/2)));break;case 6:for(i=Math.round(dimension[1]/5);i<Math.round(4*dimension[1]/5);i++)playing_field.add(new Wall(Math.round(4*dimension[0]/5),i)),playing_field.add(new Wall(Math.round(3*dimension[0]/5),i)),playing_field.add(new Wall(Math.round(2*dimension[0]/5),i)),playing_field.add(new Wall(Math.round(dimension[0]/5),i));break;case 7:for(i=Math.round(dimension[1]/8);i<Math.round(3*dimension[1]/5);i++)playing_field.add(new Wall(Math.round(dimension[0]/3),dimension[1]-i)),playing_field.add(new Wall(Math.round(2*dimension[0]/3),i));for(i=Math.round(dimension[0]/8);i<Math.round(3*dimension[0]/5);i++)playing_field.add(new Wall(i,Math.round(dimension[1]/3))),playing_field.add(new Wall(dimension[0]-i,Math.round(2*dimension[1]/3)));break;case 0:for(i=0;i<Math.round(dimension[1]);i+=2)playing_field.add(new Wall(Math.round(dimension[0]/2),i))}}function redraw(){ctx.fillStyle=CLEAR_COLOR,ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height),playing_field.redraw(ctx,10)}function reset(){cancelAnimationFrame(raf),cur_time=Date.now(),leftover=0,speed=speeds[scope.speed]*base_speed,action_queue=[],player_snake.reset_snake(Math.round(dimension[0]*starting_locations[0][0]),Math.round(dimension[1]*starting_locations[0][1]));for(var i=0;i<scope.ai_snakes;i++)ai_snake[i].reset_snake(Math.round(dimension[0]*starting_locations[i+1][0]),Math.round(dimension[1]*starting_locations[i+1][1]));candy.reset_candy(),requestAnimationFrame(draw)}function draw(){for(last_time=cur_time,cur_time=Date.now(),leftover+=cur_time-last_time;!scope.paused&&leftover>speed;)update_loop(),leftover-=speed;raf=requestAnimationFrame(draw)}function update_loop(){player_snake.clean_tail();for(var i=0;i<scope.ai_snakes;i++)ai_snake[i].clean_tail(),ai_snake[i].compute_action(player_snake.x+player_snake.dir_x,player_snake.y+player_snake.dir_y,candy.x,candy.y),ai_snake[i].is_alive()&&(response=ai_snake[i].update(),response===HIT_CANDY?candy.findSpawn():null!==response&&(ai_snake[i].kill(),score(kill_bonus)));if(next_action(),response=player_snake.update(),response===HIT_CANDY)got_candy();else if(null!==response)return void died()}function next_action(){var is_input_valid;do is_input_valid=action_queue.length>0?player_snake.keyInput(action_queue.shift()):!0;while(is_input_valid===!1)}function score(num){$timeout(function(){for(scope.score+=num;scope.score>extra_life_score;)extra_life_score+=extra_life_req,scope.lives++;scope.score>scope.highscore&&(scope.highscore=scope.score,localStorage.highscore=scope.highscore)})}function died(){$timeout(function(){scope.lives--,scope.paused=!0,0===scope.lives?(scope.gameover=!0,scope.dead=!1):(scope.dead=!0,scope.gameover=!1)})}function got_candy(){score(candy_bonus),speed/=1.13,candy.findSpawn(),$timeout(function(){scope.cur_candy++,scope.cur_candy===scope.needed_candy&&next_stage()})}function next_stage(){scope.stage++,scope.stage===next_stage_speedup&&(next_stage_speedup+=8,base_speed/=1.25),scope.newstage=!0,score(level_bonus),load_stage()}function queue_action(action){action_queue.push(action)}function togglePause(){scope.paused?unPause():$timeout(function(){scope.dead=!1,scope.paused=!0,scope.gameover=!1,scope.newstage=!1})}function unPause(){scope.paused&&$timeout(function(){scope.gameover?restart():(scope.dead&&reset(),cur_time=Date.now(),leftover=0,scope.paused=!1,scope.dead=!1,scope.newgame=!1,scope.newstage=!1)})}element=document.getElementById("snakegame");var ctx=element.getContext("2d"),resize=function(){null!==dimension&&(element.style.width=scope.w+"px",element.style.height=scope.h+"px",ctx.canvas.width=10*dimension[0],ctx.canvas.height=10*dimension[1],redraw())};scope.$watch("w+h",resize),scope.goFullscreen=function(){var elem=document.getElementById("wellosnake");elem.requestFullscreen?elem.requestFullscreen():elem.mozRequestFullScreen?elem.mozRequestFullScreen():elem.webkitRequestFullScreen?elem.webkitRequestFullScreen():elem.msRequestFullscreen?elem.msRequestFullscreen():alert("Fullscreen not supported for your browswer")};var playing_field,player_snake,ai_snake,candy,HIT_WALL=-1,HIT_CANDY=-2,PLAYER_SNAKE_TYPE=0,AI_SNAKE_GATHERER_TYPE=1,AI_SNAKE_ASSASSIN_TYPE=2,AI_SNAKE_CLOSEST_TYPE=3,AI_SNAKE_FARTHEST_TYPE=4,CLEAR_COLOR="#00F",MAX_CANDY_TRIES=20,SNAKE_BORDER_PIXELS=2,HASH_MULTIPLIER=1e4,DEFAULT_SPEED=0,DEFAULT_DIMENSION=1,DEFAULT_AI_SNAKES=2,DEFAULT_START_LENGTH=2,DEFAULT_EXPAND_LENGTH=2,DEFAULT_CANDY_BUFFER=2;scope.highscore=0;var temp_highscore=parseInt(localStorage.highscore);isNaN(temp_highscore)&&(localStorage.highscore=0),temp_highscore>scope.highscore&&(scope.highscore=temp_highscore);var speeds=[80,60,40,20],dimensions=[[40,30],[60,45],[80,60]],starting_lengths=[5,10,20,50],expand_lengths=[1,5,10,50],candy_buffers=[0,1,2,3];scope.ai_snake_options=[{value:0,name:"0 (Trivial)"},{value:1,name:"1 (Simple)"},{value:2,name:"2 (Beginner)"},{value:3,name:"3 (Recommended)"},{value:4,name:"4 (Hard)"},{value:5,name:"5 (Very Hard)"},{value:6,name:"6 (Yikes!)"},{value:7,name:"7 (Frustrating)"}],scope.speed_options=[{value:0,name:"Slow (Beginner)"},{value:1,name:"Medium (Recommended)"},{value:2,name:"Fast (Hard)"},{value:3,name:"Twiddle Fingers (Impossible)"}],scope.dimension_options=[{value:0,name:"Tiny (Hard)"},{value:1,name:"Regular (Recommended)"},{value:2,name:"Huge (Slower-Paced)"}],scope.starting_length_options=[{value:0,name:"5 (Tricky with AI)"},{value:1,name:"10 (Easier)"},{value:2,name:"20 (Recommended)"},{value:3,name:"50 (Messy)"}],scope.expand_length_options=[{value:0,name:"5 (Very Easy)"},{value:1,name:"5 (Easy)"},{value:2,name:"10 (Recommended)"},{value:3,name:"50 (Huge Mess)"}],scope.candy_buffer_options=[{value:0,name:"No Buffer (Spawn Anywhere)"},{value:1,name:"1 (Spawn 1+ Blocks from Walls)"},{value:2,name:"2 (Spawn 2+ Blocks from Walls)"},{value:3,name:"3 (Spawn 3+ Blocks from Walls)"}];var speed,base_speed,start_length,expand_length,candy_buffer,extra_life_score,next_stage_speedup,kill_bonus,level_bonus,candy_bonus,raf,cur_time,last_time,leftover,action_queue,response,starting_locations=[[.2,.13],[.8,.87],[.2,.87],[.8,.13],[.9,.6],[.9,.4],[.1,.6],[.1,.4]],length_bonus=[1,1,2,4],speed_snake_bonus=[5,10,20,100],dimension_bonus=[7,3,2],speed_dimension_bonus=[1,2,5,10],candy_dimension_bonus=[30,20,10],extra_life_req=1e3,dimension=null;Wall.prototype=Object.create(Collidable.prototype),PlayerSnakeNib.prototype=Object.create(Collidable.prototype),AssassinSnakeNib.prototype=Object.create(Collidable.prototype),GathererSnakeNib.prototype=Object.create(Collidable.prototype),ClosestSnakeNib.prototype=Object.create(Collidable.prototype),FarthestSnakeNib.prototype=Object.create(Collidable.prototype),Candy.prototype=Object.create(Collidable.prototype);var updateSnakeMixin={update:function(){0!==this.dir_x?1===this.dir_x?this.x++:this.x--:1===this.dir_y?this.y++:this.y--;var hash_test=this.collidable_hash.test(this.x,this.y);return null!==hash_test?hash_test===HIT_CANDY&&(this.enqueue(this.x,this.y),this.expand(this.expand_size)):this.enqueue(this.x,this.y),hash_test}};_.extend(PlayerSnake.prototype,updateSnakeMixin),_.extend(AISnake.prototype,updateSnakeMixin),$timeout(function(){scope.speed=DEFAULT_SPEED,scope.dimension=DEFAULT_DIMENSION,scope.ai_snakes=DEFAULT_AI_SNAKES,scope.starting_length=DEFAULT_START_LENGTH,scope.expand_length=DEFAULT_EXPAND_LENGTH,scope.candy_buffer=DEFAULT_CANDY_BUFFER,init()}),scope.open_config=function(){scope.configing=!0,scope.paused=!0,scope.edit_speed=scope.speed,scope.edit_dimension=scope.dimension,scope.edit_ai_snakes=scope.ai_snakes,scope.edit_starting_length=scope.starting_length,scope.edit_expand_length=scope.expand_length,scope.edit_candy_buffer=scope.candy_buffer},scope.cancel_config=function(){$timeout(function(){scope.configing=!1})},scope.commit_config=function(){$timeout(function(){scope.speed=scope.edit_speed,scope.dimension=scope.edit_dimension,scope.ai_snakes=scope.edit_ai_snakes,scope.starting_length=scope.edit_starting_length,scope.expand_length=scope.edit_expand_length,scope.candy_buffer=scope.edit_candy_buffer,scope.configing=!1,init()})};var init=function(){speed=speeds[scope.speed],candy_buffer=candy_buffers[scope.candy_buffer],expand_length=expand_lengths[scope.expand_length],start_length=starting_lengths[scope.starting_length],dimension=dimensions[scope.dimension],kill_bonus=dimension_bonus[scope.dimension]*speed_dimension_bonus[scope.speed],level_bonus=kill_bonus*(1+Math.floor(Math.pow(scope.ai_snakes,1.2))),candy_bonus=10*length_bonus[scope.expand_length]*length_bonus[scope.starting_length]+candy_dimension_bonus[scope.dimension]+Math.floor(Math.pow(scope.ai_snakes,1.3))*speed_snake_bonus[scope.speed]*dimension_bonus[scope.dimension],playing_field=new CollidableHash(ctx,10,dimension[0],dimension[1]),player_snake=new PlayerSnake(start_length,expand_length,playing_field),ai_snake=_.range(scope.ai_snakes).map(function(){return new AISnake(start_length,expand_length,playing_field)}),candy=new Candy(playing_field,candy_buffer),resize(),restart()};scope.restart=function(){restart()},document.addEventListener("keydown",function(event){switch(event.keyCode){case 37:case 65:scope.paused||queue_action(4);break;case 38:case 87:scope.paused||queue_action(1);break;case 39:case 68:scope.paused||queue_action(2);break;case 40:case 83:scope.paused||queue_action(3);break;case 32:scope.configing||togglePause()}}),scope.force_unpause=function(){unPause()}}}}]);